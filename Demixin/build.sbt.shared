libraryDependencies += scalaOrganization.value % "scala-reflect" % scalaVersion.value % Provided

libraryDependencies += "com.chuusai" %%% "shapeless" % "2.3.2"

libraryDependencies += "org.scalatest" %%% "scalatest" % "3.0.1" % Test

addCompilerPlugin(("org.scalameta" % "paradise" % "3.0.0-M8").cross(CrossVersion.patch))
autoCompilerPlugins in Compile := false
autoCompilerPlugins in Test := true

libraryDependencies += "com.thoughtworks.example" %% "example" % "1.0.0"
sourceGenerators in Test += Def.task {
  val className = s"${name.value}Spec"
  val outputFile = (sourceManaged in Test).value / "ScaladocSpec.scala"
  val fileNames = (unmanagedSources in Compile).value
    .map { file =>
      import scala.reflect.runtime.universe._
      Literal(Constant(file.toString))
    }
    .mkString(",")
  val fileContent = raw"""
    package com.thoughtworks.feature;
    @_root_.com.thoughtworks.example($fileNames) class DemixinScaladocSpec extends org.scalatest.FreeSpec
  """
  IO.write(outputFile, fileContent, scala.io.Codec.UTF8.charSet)
  Seq(outputFile)
}.taskValue
incOptions in Test := (incOptions in Test).value.withRecompileOnMacroDef(true)
